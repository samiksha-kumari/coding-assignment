{"version":3,"sources":["man.png","components/react-select/List.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","List","samiksha","props","selecteds","forEach","element","state","users","data","value","name","push","setState","axios","get","then","response","catch","err","console","log","className","this","length","map","label","src","logo","width","height","options","style","opacity","fontSize","marginLeft","email","isMulti","isSearchable","onChange","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,iC,8OCMtBC,G,kBACnB,aAAe,IAAD,8BACZ,+CAkBFC,SAAW,SAAAC,GACT,IAAIC,EAAY,GACZD,GACFA,EAAME,SAAQ,SAAAC,GACZ,EAAKC,MAAMC,MAAMH,SAAQ,SAAAI,GACnBH,EAAQI,OAASD,EAAKE,MACxBP,EAAUQ,KAAKH,SAIrB,EAAKI,SAAS,CAAET,eAEhB,EAAKS,SAAS,CAAET,UAAW,MA7B7B,EAAKG,MAAQ,CACXC,MAAO,GACPJ,UAAW,IAJD,E,iFAQO,IAAD,OAClBU,IACGC,IAAI,8CACJC,MAAK,SAAAC,GACJ,IAAMT,EAAQS,EAASR,KACvB,EAAKI,SAAS,CAAEL,aAEjBU,OAAM,SAAAC,GACLC,QAAQC,IAAIF,Q,+BAoBhB,OADAC,QAAQC,MAEN,yBAAKC,UAAU,aACb,yCAAeC,KAAKhB,MAAMC,MAAMgB,QAChC,kBAAC,IAAD,CACEd,MAAOa,KAAKhB,MAAMH,UAAUqB,KAAI,SAAAhB,GAC9B,MAAO,CACLC,MAAOD,EAAKE,KACZe,MACE,6BACE,yBAAKC,IAAKC,IAAMC,MAAM,OAAOC,OAAO,SADtC,IACiDrB,EAAKE,UAK5DoB,QAASR,KAAKhB,MAAMC,MAAMiB,KAAI,SAAAhB,GAC5B,MAAO,CACLC,MAAOD,EAAKE,KACZe,MACE,6BACE,yBAAKC,IAAKC,IAAMC,MAAM,OAAOC,OAAO,SADtC,IACiDrB,EAAKE,KACpD,0BACEqB,MAAO,CACLC,QAAS,GACTC,SAAU,OACVC,WAAY,SAGb1B,EAAK2B,YAMhBC,SAAO,EACPC,cAAY,EACZC,SAAUhB,KAAKrB,gB,GAxESsC,IAAMC,YCKzBC,MARf,WACE,OACE,yBAAKpB,UAAU,OACb,kBAAC,EAAD,QCMcqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,MAAK,SAAAuC,GACjCA,EAAaC,kB","file":"static/js/main.31e39a5f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/man.bd80794f.png\";","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport Select from \"react-select\";\r\nimport logo from \"../../man.png\";\r\nimport \"../../App.css\";\r\n\r\nexport default class List extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      users: [],\r\n      selecteds: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    axios\r\n      .get(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then(response => {\r\n        const users = response.data;\r\n        this.setState({ users });\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  }\r\n  samiksha = props => {\r\n    let selecteds = [];\r\n    if (props) {\r\n      props.forEach(element => {\r\n        this.state.users.forEach(data => {\r\n          if (element.value == data.name) {\r\n            selecteds.push(data);\r\n          }\r\n        });\r\n      });\r\n      this.setState({ selecteds });\r\n    } else {\r\n      this.setState({ selecteds: [] });\r\n    }\r\n  };\r\n  render() {\r\n    console.log();\r\n    return (\r\n      <div className=\"container\">\r\n        <h2>Listing - {this.state.users.length}</h2>\r\n        <Select\r\n          value={this.state.selecteds.map(data => {\r\n            return {\r\n              value: data.name,\r\n              label: (\r\n                <div>\r\n                  <img src={logo} width=\"30px\" height=\"30px\" /> {data.name}\r\n                </div>\r\n              )\r\n            };\r\n          })}\r\n          options={this.state.users.map(data => {\r\n            return {\r\n              value: data.name,\r\n              label: (\r\n                <div>\r\n                  <img src={logo} width=\"30px\" height=\"30px\" /> {data.name}\r\n                  <span\r\n                    style={{\r\n                      opacity: 0.3,\r\n                      fontSize: \"14px\",\r\n                      marginLeft: \"20px\"\r\n                    }}\r\n                  >\r\n                    {data.email}\r\n                  </span>\r\n                </div>\r\n              )\r\n            };\r\n          })}\r\n          isMulti\r\n          isSearchable\r\n          onChange={this.samiksha}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport List from \"./components/react-select/List\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <List />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}